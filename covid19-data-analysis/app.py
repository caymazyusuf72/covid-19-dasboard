"""
COVID-19 Data Analysis Dashboard
===============================

Bu Streamlit uygulamasƒ± COVID-19 verilerini interaktif olarak ke≈üfetmek i√ßin tasarlanmƒ±≈ütƒ±r.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sys
import os
from datetime import datetime, timedelta
import warnings

warnings.filterwarnings('ignore')

# Proje mod√ºllerini import et
sys.path.append('src')
try:
    from data_processing import CovidDataLoader, calculate_derived_metrics, calculate_time_series_metrics
    from analysis import CovidAnalyzer
    from visualization import CovidVisualizer
    from utils import format_large_number, load_config
except ImportError as e:
    st.error(f"Mod√ºl import hatasƒ±: {e}")
    st.stop()

# Sayfa yapƒ±landƒ±rmasƒ±
st.set_page_config(
    page_title="COVID-19 Veri Analizi",
    page_icon="ü¶†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ba≈ülƒ±k
st.title("ü¶† COVID-19 Veri Analizi Dashboard")
st.markdown("---")

# Sidebar
st.sidebar.title("üîß Kontrol Paneli")

# Cache fonksiyonlarƒ± - veri y√ºkleme performansƒ± i√ßin
@st.cache_data(ttl=3600)  # 1 saat cache
def load_covid_data():
    """COVID-19 verilerini y√ºkler ve cache'ler"""
    loader = CovidDataLoader()
    
    # Snapshot verisi
    snapshot_data = loader.load_disease_sh_data()
    if snapshot_data is not None:
        snapshot_data = calculate_derived_metrics(snapshot_data)
    
    # Zaman serisi verisi
    confirmed_data = loader.load_johns_hopkins_data('confirmed')
    if confirmed_data is not None:
        confirmed_data = calculate_time_series_metrics(confirmed_data, 'confirmed')
    
    return snapshot_data, confirmed_data

# Veri y√ºkleme
with st.spinner('üìä COVID-19 verileri y√ºkleniyor...'):
    snapshot_data, confirmed_data = load_covid_data()

if snapshot_data is None:
    st.error("‚ùå Snapshot verisi y√ºklenemedi. L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin.")
    st.stop()

# Analiz sƒ±nƒ±flarƒ±nƒ± ba≈ülat
analyzer = CovidAnalyzer()
visualizer = CovidVisualizer()

# Global istatistikler
global_stats = analyzer.calculate_global_stats(snapshot_data)

# Sidebar se√ßenekleri
st.sidebar.header("üìã Filtreler")

# √úlke se√ßimi
available_countries = sorted(snapshot_data['country'].unique())
selected_countries = st.sidebar.multiselect(
    "üåç √úlke Se√ßin",
    options=available_countries,
    default=['Turkey', 'Germany', 'United States', 'Italy'],
    help="Analiz edilecek √ºlkeleri se√ßin"
)

# Metrik se√ßimi
metrics_options = {
    'total_cases': 'Toplam Vaka',
    'total_deaths': 'Toplam √ñl√ºm', 
    'total_recovered': 'Toplam ƒ∞yile≈üen',
    'active_cases': 'Aktif Vaka',
    'cases_per_million': 'Milyon Ba≈üƒ±na Vaka',
    'deaths_per_million': 'Milyon Ba≈üƒ±na √ñl√ºm'
}

selected_metric = st.sidebar.selectbox(
    "üìä Analiz Metriƒüi",
    options=list(metrics_options.keys()),
    format_func=lambda x: metrics_options[x],
    index=0
)

# G√∂rselle≈ütirme tipi
chart_type = st.sidebar.radio(
    "üìà Grafik Tipi",
    ["Bar Chart", "Line Chart", "Scatter Plot", "Map View"],
    help="G√∂rselle≈ütirme tipini se√ßin"
)

# Ana sayfa d√ºzeni
col1, col2, col3, col4 = st.columns(4)

# Global istatistikler kartlarƒ±
with col1:
    st.metric(
        "üåç Toplam Vaka",
        format_large_number(global_stats['total_cases']),
        delta=f"{global_stats['countries_with_new_cases']} √ºlkede yeni vaka"
    )

with col2:
    st.metric(
        "üíÄ Toplam √ñl√ºm", 
        format_large_number(global_stats['total_deaths']),
        delta=f"CFR: {global_stats['global_cfr']:.2f}%"
    )

with col3:
    st.metric(
        "üíö Toplam ƒ∞yile≈üen",
        format_large_number(global_stats['total_recovered']),
        delta=f"ƒ∞yile≈üme oranƒ±: {global_stats['global_recovery_rate']:.1f}%"
    )

with col4:
    st.metric(
        "üü° Aktif Vaka",
        format_large_number(global_stats['total_active']),
        delta=f"{global_stats['total_countries']} √ºlke"
    )

st.markdown("---")

# Ana i√ßerik alanƒ±
if selected_countries:
    
    # Se√ßili √ºlkeler i√ßin veri filtrele
    filtered_data = snapshot_data[snapshot_data['country'].isin(selected_countries)]
    
    # Tab'lar olu≈ütur
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä Genel Bakƒ±≈ü", 
        "üìà Zaman Serisi", 
        "üîç Detaylƒ± Analiz", 
        "üåç Global Harita"
    ])
    
    with tab1:
        st.header("üìä Se√ßili √úlkeler - Genel Bakƒ±≈ü")
        
        # √úlke kar≈üƒ±la≈ütƒ±rma tablosu
        comparison_metrics = ['total_cases', 'total_deaths', 'active_cases', 'cases_per_million']
        comparison_df = analyzer.compare_countries(snapshot_data, selected_countries, comparison_metrics)
        
        if not comparison_df.empty:
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # ƒ∞nteraktif grafik
                if chart_type == "Bar Chart":
                    fig = px.bar(
                        filtered_data,
                        x='country',
                        y=selected_metric,
                        title=f"{metrics_options[selected_metric]} Kar≈üƒ±la≈ütƒ±rmasƒ±",
                        labels={'country': '√úlke', selected_metric: metrics_options[selected_metric]},
                        color=selected_metric,
                        color_continuous_scale='viridis'
                    )
                    fig.update_layout(height=500)
                    st.plotly_chart(fig, use_container_width=True)
                
                elif chart_type == "Scatter Plot":
                    x_metric = 'total_cases'
                    y_metric = 'total_deaths'
                    
                    fig = px.scatter(
                        filtered_data,
                        x=x_metric,
                        y=y_metric,
                        size='population' if 'population' in filtered_data.columns else None,
                        hover_name='country',
                        title=f"{metrics_options.get(y_metric, y_metric)} vs {metrics_options.get(x_metric, x_metric)}",
                        labels={
                            x_metric: metrics_options.get(x_metric, x_metric),
                            y_metric: metrics_options.get(y_metric, y_metric)
                        }
                    )
                    fig.update_layout(height=500)
                    st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Kar≈üƒ±la≈ütƒ±rma tablosu
                st.subheader("üìã Kar≈üƒ±la≈ütƒ±rma Tablosu")
                
                display_df = comparison_df.copy()
                # Sayƒ±sal deƒüerleri formatla
                for col in ['total_cases', 'total_deaths', 'active_cases']:
                    if col in display_df.columns:
                        display_df[col] = display_df[col].apply(lambda x: f"{x:,.0f}" if pd.notna(x) else "N/A")
                
                for col in ['cases_per_million', 'deaths_per_million']:
                    if col in display_df.columns:
                        display_df[col] = display_df[col].apply(lambda x: f"{x:,.0f}" if pd.notna(x) else "N/A")
                
                st.dataframe(display_df, use_container_width=True)
    
    with tab2:
        st.header("üìà Zaman Serisi Analizi")
        
        if confirmed_data is not None:
            # Zaman serisi filtresi
            time_filter = st.selectbox(
                "‚è±Ô∏è Zaman Aralƒ±ƒüƒ±",
                ["Son 30 g√ºn", "Son 90 g√ºn", "Son 1 yƒ±l", "T√ºm veriler"],
                index=2
            )
            
            # Tarihi filtrele
            max_date = confirmed_data['date'].max()
            if time_filter == "Son 30 g√ºn":
                start_date = max_date - timedelta(days=30)
            elif time_filter == "Son 90 g√ºn":
                start_date = max_date - timedelta(days=90)
            elif time_filter == "Son 1 yƒ±l":
                start_date = max_date - timedelta(days=365)
            else:
                start_date = confirmed_data['date'].min()
            
            time_filtered_data = confirmed_data[
                (confirmed_data['date'] >= start_date) & 
                (confirmed_data['country'].isin(selected_countries))
            ]
            
            if not time_filtered_data.empty:
                col1, col2 = st.columns(2)
                
                with col1:
                    # K√ºm√ºlatif veri
                    fig_cumulative = px.line(
                        time_filtered_data,
                        x='date',
                        y='confirmed',
                        color='country',
                        title='K√ºm√ºlatif Confirmed Vakalarƒ±',
                        labels={'date': 'Tarih', 'confirmed': 'Toplam Vaka'}
                    )
                    fig_cumulative.update_layout(height=400)
                    st.plotly_chart(fig_cumulative, use_container_width=True)
                
                with col2:
                    # G√ºnl√ºk yeni vakalar
                    if 'new_confirmed' in time_filtered_data.columns:
                        fig_daily = px.line(
                            time_filtered_data,
                            x='date',
                            y='new_confirmed',
                            color='country',
                            title='G√ºnl√ºk Yeni Vakalar',
                            labels={'date': 'Tarih', 'new_confirmed': 'Yeni Vaka'}
                        )
                        fig_daily.update_layout(height=400)
                        st.plotly_chart(fig_daily, use_container_width=True)
                
                # Hareketli ortalama
                if 'confirmed_7day_avg' in time_filtered_data.columns:
                    st.subheader("üìä 7 G√ºnl√ºk Hareketli Ortalama")
                    fig_ma = px.line(
                        time_filtered_data,
                        x='date',
                        y='confirmed_7day_avg',
                        color='country',
                        title='7 G√ºnl√ºk Hareketli Ortalama (Yeni Vakalar)',
                        labels={'date': 'Tarih', 'confirmed_7day_avg': '7 G√ºn Ortalamasƒ±'}
                    )
                    fig_ma.update_layout(height=400)
                    st.plotly_chart(fig_ma, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Zaman serisi verisi mevcut deƒüil")
    
    with tab3:
        st.header("üîç Detaylƒ± Analiz")
        
        selected_country = st.selectbox(
            "üéØ Detaylƒ± analiz i√ßin √ºlke se√ßin:",
            options=selected_countries,
            index=0
        )
        
        if selected_country:
            country_data = snapshot_data[snapshot_data['country'] == selected_country]
            
            if not country_data.empty:
                data = country_data.iloc[0]
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("ü¶† Toplam Vaka", f"{data.get('total_cases', 0):,}")
                    st.metric("üíÄ Toplam √ñl√ºm", f"{data.get('total_deaths', 0):,}")
                    st.metric("üíö Toplam ƒ∞yile≈üen", f"{data.get('total_recovered', 0):,}")
                
                with col2:
                    st.metric("üü° Aktif Vaka", f"{data.get('active_cases', 0):,}")
                    st.metric("üÜï Yeni Vaka", f"{data.get('new_cases', 0):,}")
                    st.metric("‚ö∞Ô∏è Yeni √ñl√ºm", f"{data.get('new_deaths', 0):,}")
                
                with col3:
                    cfr = data.get('case_fatality_rate', 0)
                    recovery_rate = data.get('recovery_rate', 0)
                    st.metric("üìä Vaka √ñl√ºm Oranƒ±", f"{cfr:.2f}%")
                    st.metric("üìà ƒ∞yile≈üme Oranƒ±", f"{recovery_rate:.2f}%")
                    st.metric("üìä Milyon/Vaka", f"{data.get('cases_per_million', 0):,.0f}")
                
                # Donut chart - vaka daƒüƒ±lƒ±mƒ±
                if all(col in data.index for col in ['total_recovered', 'active_cases', 'total_deaths']):
                    st.subheader(f"üìä {selected_country} - Vaka Daƒüƒ±lƒ±mƒ±")
                    
                    values = [
                        data.get('total_recovered', 0),
                        data.get('active_cases', 0), 
                        data.get('total_deaths', 0)
                    ]
                    labels = ['ƒ∞yile≈üen', 'Aktif', 'Vefat']
                    colors = ['#2ca02c', '#ff7f0e', '#d62728']
                    
                    fig_donut = go.Figure(data=[go.Pie(
                        labels=labels,
                        values=values,
                        hole=0.4,
                        marker=dict(colors=colors)
                    )])
                    
                    fig_donut.update_layout(
                        title=f"{selected_country} Vaka Daƒüƒ±lƒ±mƒ±",
                        height=400
                    )
                    st.plotly_chart(fig_donut, use_container_width=True)
                
                # Trend analizi (eƒüer zaman serisi varsa)
                if confirmed_data is not None:
                    trend_analysis = analyzer.analyze_country_trends(confirmed_data, selected_country, days_back=30)
                    
                    if 'error' not in trend_analysis:
                        st.subheader(f"üìà {selected_country} - Trend Analizi")
                        st.json(trend_analysis)
    
    with tab4:
        st.header("üåç Global Harita")
        
        # D√ºnya haritasƒ±
        fig_map = px.choropleth(
            snapshot_data,
            locations='country',
            locationmode='country names',
            color=selected_metric,
            hover_name='country',
            hover_data={
                'total_cases': ':,',
                'total_deaths': ':,',
                selected_metric: ':,.0f'
            },
            color_continuous_scale='Reds',
            title=f"D√ºnya - {metrics_options[selected_metric]} Daƒüƒ±lƒ±mƒ±"
        )
        
        fig_map.update_layout(
            height=600,
            geo=dict(showframe=False, showcoastlines=True)
        )
        
        st.plotly_chart(fig_map, use_container_width=True)
        
        # En √ßok etkilenen √ºlkeler
        st.subheader("üèÜ En √áok Etkilenen √úlkeler")
        
        top_n = st.slider("G√∂sterilecek √ºlke sayƒ±sƒ±:", 5, 20, 10)
        
        top_countries = snapshot_data.nlargest(top_n, selected_metric)[
            ['country', selected_metric, 'total_cases', 'total_deaths']
        ]
        
        # Formatla
        display_top = top_countries.copy()
        for col in ['total_cases', 'total_deaths']:
            if col in display_top.columns:
                display_top[col] = display_top[col].apply(lambda x: f"{x:,}" if pd.notna(x) else "N/A")
        
        if selected_metric not in ['total_cases', 'total_deaths']:
            display_top[selected_metric] = display_top[selected_metric].apply(lambda x: f"{x:,.0f}")
        
        st.dataframe(display_top, use_container_width=True)

else:
    st.warning("‚ö†Ô∏è L√ºtfen en az bir √ºlke se√ßin.")

# Footer
st.markdown("---")
col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("üìä **Veri Kaynaklarƒ±:**")
    st.markdown("- Disease.sh API")
    st.markdown("- Johns Hopkins University")

with col2:
    st.markdown("üïí **Son G√ºncelleme:**")
    st.markdown(f"{datetime.now().strftime('%Y-%m-%d %H:%M')}")

with col3:
    st.markdown("üîß **Geli≈ütiren:**")
    st.markdown("COVID-19 Analiz Projesi")

# Sidebar bilgileri
st.sidebar.markdown("---")
st.sidebar.markdown("### ‚ÑπÔ∏è Bilgi")
st.sidebar.markdown(f"üìä Toplam √ºlke: {len(available_countries)}")
st.sidebar.markdown(f"üìÖ Veri tarihi: {datetime.now().strftime('%Y-%m-%d')}")

if confirmed_data is not None:
    data_date_range = confirmed_data['date'].max() - confirmed_data['date'].min()
    st.sidebar.markdown(f"‚è±Ô∏è Zaman aralƒ±ƒüƒ±: {data_date_range.days} g√ºn")

st.sidebar.markdown("---")
st.sidebar.markdown("### üöÄ Hƒ±zlƒ± Eri≈üim")

if st.sidebar.button("üîÑ Veriyi Yenile"):
    st.cache_data.clear()
    st.experimental_rerun()

if st.sidebar.button("üìã Veri ƒ∞ndir"):
    if not filtered_data.empty:
        csv = filtered_data.to_csv(index=False)
        st.sidebar.download_button(
            label="üíæ CSV ƒ∞ndir",
            data=csv,
            file_name=f"covid19_data_{datetime.now().strftime('%Y%m%d')}.csv",
            mime="text/csv"
        )

# Hata ayƒ±klama i√ßin
if st.sidebar.checkbox("üîß Debug Modu"):
    st.sidebar.markdown("### üîç Debug Bilgileri")
    st.sidebar.markdown(f"- Snapshot shape: {snapshot_data.shape if snapshot_data is not None else 'None'}")
    if confirmed_data is not None:
        st.sidebar.markdown(f"- Time series shape: {confirmed_data.shape}")
    st.sidebar.markdown(f"- Selected countries: {len(selected_countries)}")
    st.sidebar.markdown(f"- Selected metric: {selected_metric}")