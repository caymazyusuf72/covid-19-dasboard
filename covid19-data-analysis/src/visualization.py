"""
COVID-19 Data Visualization Module
==================================

Bu mod√ºl COVID-19 verilerini g√∂rselle≈ütirmek i√ßin fonksiyonlar i√ßerir.
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from typing import List, Optional, Tuple, Dict, Union
import warnings
from datetime import datetime, timedelta
import os
import sys

# Kendi mod√ºl√ºm√ºz√º import edelim
sys.path.append(os.path.dirname(__file__))
from utils import load_config, format_large_number

warnings.filterwarnings('ignore')

# Matplotlib T√ºrk√ße karakter desteƒüi
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial']
sns.set_style("whitegrid")

class CovidVisualizer:
    """COVID-19 verilerini g√∂rselle≈ütirmek i√ßin ana sƒ±nƒ±f."""
    
    def __init__(self, config_path: str = "config.yaml"):
        """
        CovidVisualizer'ƒ± ba≈ülatƒ±r.
        
        Args:
            config_path (str): Yapƒ±landƒ±rma dosyasƒ±nƒ±n yolu
        """
        try:
            self.config = load_config(config_path)
            self.colors = self.config.get('visualization', {}).get('colors', {})
            self.figure_size = self.config.get('visualization', {}).get('figure_size', [12, 8])
        except:
            # Eƒüer config y√ºklenemezse varsayƒ±lan deƒüerler
            self.colors = {
                'confirmed': '#1f77b4',
                'deaths': '#d62728', 
                'recovered': '#2ca02c',
                'active': '#ff7f0e'
            }
            self.figure_size = [12, 8]
    
    
    def plot_country_summary(self, df: pd.DataFrame, country: str, save_path: Optional[str] = None) -> plt.Figure:
        """
        Belirli bir √ºlkenin √∂zet istatistiklerini g√∂rselle≈ütirir.
        
        Args:
            df (pd.DataFrame): COVID-19 snapshot verisi
            country (str): √úlke adƒ±
            save_path (str, optional): Grafiƒüi kaydetmek i√ßin dosya yolu
            
        Returns:
            plt.Figure: Matplotlib figure objesi
        """
        # √úlke verisini filtrele
        country_data = df[df['country'] == country]
        
        if country_data.empty:
            print(f"‚ö†Ô∏è {country} i√ßin veri bulunamadƒ±")
            return None
        
        data = country_data.iloc[0]
        
        # Figure olu≈ütur
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle(f'ü¶† COVID-19 √ñzet ƒ∞statistikleri - {country}', fontsize=16, fontweight='bold')
        
        # 1. Toplam Rakamlar (Bar Chart)
        categories = ['Toplam\nVaka', 'Aktif\nVaka', 'ƒ∞yile≈üen', 'Vefat']
        values = [
            data.get('total_cases', 0),
            data.get('active_cases', 0),
            data.get('total_recovered', 0),
            data.get('total_deaths', 0)
        ]
        colors = [self.colors.get('confirmed', '#1f77b4'),
                 self.colors.get('active', '#ff7f0e'),
                 self.colors.get('recovered', '#2ca02c'),
                 self.colors.get('deaths', '#d62728')]
        
        bars = axes[0, 0].bar(categories, values, color=colors, alpha=0.8)
        axes[0, 0].set_title('Toplam Rakamlar', fontweight='bold')
        axes[0, 0].set_ylabel('Ki≈üi Sayƒ±sƒ±')
        
        # Bar'larƒ±n √ºzerine deƒüerleri yaz
        for bar, value in zip(bars, values):
            height = bar.get_height()
            axes[0, 0].text(bar.get_x() + bar.get_width()/2., height,
                           format_large_number(value),
                           ha='center', va='bottom', fontweight='bold')
        
        # Y eksenini formatla
        axes[0, 0].yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: format_large_number(x)))
        
        
        # 2. G√ºnl√ºk Yeni Vakalar
        daily_categories = ['Yeni\nVaka', 'Yeni\nƒ∞yile≈üen', 'Yeni\nVefat']
        daily_values = [
            data.get('new_cases', 0),
            data.get('new_recovered', 0),
            data.get('new_deaths', 0)
        ]
        daily_colors = [colors[0], colors[2], colors[3]]
        
        bars2 = axes[0, 1].bar(daily_categories, daily_values, color=daily_colors, alpha=0.8)
        axes[0, 1].set_title('G√ºnl√ºk Yeni Rakamlar', fontweight='bold')
        axes[0, 1].set_ylabel('Ki≈üi Sayƒ±sƒ±')
        
        for bar, value in zip(bars2, daily_values):
            height = bar.get_height()
            axes[0, 1].text(bar.get_x() + bar.get_width()/2., height,
                           format_large_number(value),
                           ha='center', va='bottom', fontweight='bold')
        
        axes[0, 1].yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: format_large_number(x)))
        
        
        # 3. Oranlar (Pie Chart)
        if data.get('total_cases', 0) > 0:
            pie_labels = ['ƒ∞yile≈üen', 'Aktif', 'Vefat']
            pie_values = [
                data.get('total_recovered', 0),
                data.get('active_cases', 0),
                data.get('total_deaths', 0)
            ]
            pie_colors = [colors[2], colors[1], colors[3]]
            
            # Sƒ±fƒ±r olmayan deƒüerleri filtrele
            pie_data = [(label, value, color) for label, value, color in zip(pie_labels, pie_values, pie_colors) if value > 0]
            if pie_data:
                labels, values, colors_filtered = zip(*pie_data)
                
                wedges, texts, autotexts = axes[1, 0].pie(values, labels=labels, colors=colors_filtered, 
                                                         autopct='%1.1f%%', startangle=90)
                axes[1, 0].set_title('Vaka Daƒüƒ±lƒ±mƒ±', fontweight='bold')
            else:
                axes[1, 0].text(0.5, 0.5, 'Veri Yok', ha='center', va='center', transform=axes[1, 0].transAxes)
                axes[1, 0].set_title('Vaka Daƒüƒ±lƒ±mƒ±', fontweight='bold')
        
        
        # 4. Milyon Ki≈üi Ba≈üƒ±na Oranlar
        per_million_categories = ['Vaka/1M', 'Vefat/1M']
        per_million_values = [
            data.get('cases_per_million', 0),
            data.get('deaths_per_million', 0)
        ]
        per_million_colors = [colors[0], colors[3]]
        
        bars3 = axes[1, 1].bar(per_million_categories, per_million_values, color=per_million_colors, alpha=0.8)
        axes[1, 1].set_title('Milyon Ki≈üi Ba≈üƒ±na', fontweight='bold')
        axes[1, 1].set_ylabel('Ki≈üi/1M')
        
        for bar, value in zip(bars3, per_million_values):
            height = bar.get_height()
            axes[1, 1].text(bar.get_x() + bar.get_width()/2., height,
                           f'{value:,.0f}',
                           ha='center', va='bottom', fontweight='bold')
        
        
        # Genel d√ºzenlemeler
        plt.tight_layout()
        
        # Kaydet
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"üìä Grafik kaydedildi: {save_path}")
        
        return fig
    
    
    def plot_time_series(self, df: pd.DataFrame, countries: List[str], 
                        value_column: str = 'confirmed', 
                        show_moving_average: bool = True,
                        save_path: Optional[str] = None) -> plt.Figure:
        """
        √úlkeler i√ßin zaman serisi grafiƒüi √ßizer.
        
        Args:
            df (pd.DataFrame): Zaman serisi verisi
            countries (List[str]): G√∂rselle≈ütirilecek √ºlkeler
            value_column (str): G√∂rselle≈ütirilecek s√ºtun
            show_moving_average (bool): Hareketli ortalama g√∂ster
            save_path (str, optional): Grafiƒüi kaydetmek i√ßin dosya yolu
            
        Returns:
            plt.Figure: Matplotlib figure objesi
        """
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 12))
        
        colors_cycle = plt.cm.Set1(np.linspace(0, 1, len(countries)))
        
        for i, country in enumerate(countries):
            country_data = df[df['country'] == country].sort_values('date')
            
            if country_data.empty:
                print(f"‚ö†Ô∏è {country} i√ßin {value_column} verisi bulunamadƒ±")
                continue
            
            color = colors_cycle[i]
            
            # 1. K√ºm√ºlatif veriler
            ax1.plot(country_data['date'], country_data[value_column], 
                    label=country, color=color, linewidth=2, alpha=0.8)
            
            # 2. G√ºnl√ºk yeni veriler
            new_col = f'new_{value_column}'
            if new_col in country_data.columns:
                ax2.plot(country_data['date'], country_data[new_col],
                        label=f'{country} (G√ºnl√ºk)', color=color, alpha=0.6)
                
                # Hareketli ortalama
                if show_moving_average:
                    avg_col = f'{value_column}_7day_avg'
                    if avg_col in country_data.columns:
                        ax2.plot(country_data['date'], country_data[avg_col],
                               label=f'{country} (7 g√ºn ort.)', color=color, linewidth=2)
        
        # Grafik d√ºzenlemeleri
        ax1.set_title(f'K√ºm√ºlatif {value_column.title()} Vakalarƒ±', fontsize=14, fontweight='bold')
        ax1.set_ylabel('Toplam Vaka Sayƒ±sƒ±')
        ax1.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        ax1.grid(True, alpha=0.3)
        ax1.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: format_large_number(x)))
        
        ax2.set_title(f'G√ºnl√ºk Yeni {value_column.title()} Vakalarƒ±', fontsize=14, fontweight='bold')
        ax2.set_xlabel('Tarih')
        ax2.set_ylabel('G√ºnl√ºk Yeni Vaka')
        ax2.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        ax2.grid(True, alpha=0.3)
        ax2.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: format_large_number(x)))
        
        # X ekseni tarih formatƒ±
        for ax in [ax1, ax2]:
            ax.tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"üìä Zaman serisi grafiƒüi kaydedildi: {save_path}")
        
        return fig
    
    
    def plot_top_countries(self, df: pd.DataFrame, metric: str = 'total_cases', 
                          top_n: int = 10, save_path: Optional[str] = None) -> plt.Figure:
        """
        Belirtilen metrikte en y√ºksek deƒüerlere sahip √ºlkeleri g√∂sterir.
        
        Args:
            df (pd.DataFrame): COVID-19 snapshot verisi
            metric (str): Sƒ±ralama metriƒüi
            top_n (int): G√∂sterilecek √ºlke sayƒ±sƒ±
            save_path (str, optional): Grafiƒüi kaydetmek i√ßin dosya yolu
            
        Returns:
            plt.Figure: Matplotlib figure objesi
        """
        if metric not in df.columns:
            print(f"‚ö†Ô∏è {metric} s√ºtunu verisetinde bulunamadƒ±")
            return None
        
        # En y√ºksek deƒüerlere sahip √ºlkeleri al
        top_countries = df.nlargest(top_n, metric)
        
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Horizontal bar chart
        bars = ax.barh(range(len(top_countries)), top_countries[metric], 
                      color=self.colors.get(metric.split('_')[-1], '#1f77b4'), alpha=0.8)
        
        # √úlke isimlerini y eksenine ekle
        ax.set_yticks(range(len(top_countries)))
        ax.set_yticklabels(top_countries['country'])
        
        # Deƒüerleri bar'larƒ±n √ºzerine yaz
        for i, (bar, value) in enumerate(zip(bars, top_countries[metric])):
            width = bar.get_width()
            ax.text(width, bar.get_y() + bar.get_height()/2.,
                   format_large_number(value),
                   ha='left', va='center', fontweight='bold', fontsize=10)
        
        ax.set_xlabel(f'{metric.replace("_", " ").title()}')
        ax.set_title(f'üåç En Y√ºksek {metric.replace("_", " ").title()} - ƒ∞lk {top_n} √úlke', 
                    fontsize=14, fontweight='bold')
        
        # X ekseni formatƒ±
        ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: format_large_number(x)))
        
        # Y eksenini ters √ßevir (en y√ºksek deƒüer √ºstte)
        ax.invert_yaxis()
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"üìä Top √ºlkeler grafiƒüi kaydedildi: {save_path}")
        
        return fig
    
    
    def plot_correlation_matrix(self, df: pd.DataFrame, save_path: Optional[str] = None) -> plt.Figure:
        """
        COVID-19 metriklerinin korelasyon matrisini g√∂rselle≈ütirir.
        
        Args:
            df (pd.DataFrame): COVID-19 verisi
            save_path (str, optional): Grafiƒüi kaydetmek i√ßin dosya yolu
            
        Returns:
            plt.Figure: Matplotlib figure objesi
        """
        # Sayƒ±sal s√ºtunlarƒ± se√ß
        numeric_columns = df.select_dtypes(include=[np.number]).columns
        
        # ƒ∞lgin√ß metrikleri se√ß
        interesting_metrics = [col for col in numeric_columns if any(keyword in col.lower() 
                             for keyword in ['cases', 'deaths', 'recovered', 'active', 'rate', 'million'])]
        
        if len(interesting_metrics) < 2:
            print("‚ö†Ô∏è Korelasyon analizi i√ßin yeterli sayƒ±sal s√ºtun yok")
            return None
        
        correlation_data = df[interesting_metrics].corr()
        
        fig, ax = plt.subplots(figsize=(12, 10))
        
        # Heatmap
        sns.heatmap(correlation_data, annot=True, cmap='RdBu_r', center=0,
                   square=True, fmt='.2f', cbar_kws={"shrink": .8}, ax=ax)
        
        ax.set_title('üîç COVID-19 Metrikleri Korelasyon Matrisi', fontsize=14, fontweight='bold')
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=300, bbox_inches='tight')
            print(f"üìä Korelasyon matrisi kaydedildi: {save_path}")
        
        return fig
    
    
    def create_dashboard_summary(self, snapshot_df: pd.DataFrame, time_series_df: Optional[pd.DataFrame] = None,
                                countries: List[str] = ['Turkey', 'United States', 'Germany'],
                                save_dir: str = "reports") -> Dict[str, plt.Figure]:
        """
        Kapsamlƒ± dashboard √∂zeti olu≈üturur.
        
        Args:
            snapshot_df (pd.DataFrame): Mevcut durum verisi
            time_series_df (pd.DataFrame, optional): Zaman serisi verisi
            countries (List[str]): Analiz edilecek √ºlkeler
            save_dir (str): Grafiklerin kaydedileceƒüi dizin
            
        Returns:
            Dict[str, plt.Figure]: Olu≈üturulan fig√ºrlerin s√∂zl√ºƒü√º
        """
        figures = {}
        
        # Dizini olu≈ütur
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        
        # 1. Global top √ºlkeler
        figures['top_cases'] = self.plot_top_countries(
            snapshot_df, 'total_cases', top_n=15,
            save_path=os.path.join(save_dir, 'top_countries_cases.png')
        )
        
        figures['top_deaths'] = self.plot_top_countries(
            snapshot_df, 'total_deaths', top_n=15,
            save_path=os.path.join(save_dir, 'top_countries_deaths.png')
        )
        
        # 2. √úlke √∂zetleri
        for country in countries:
            if not snapshot_df[snapshot_df['country'] == country].empty:
                figures[f'{country.lower()}_summary'] = self.plot_country_summary(
                    snapshot_df, country,
                    save_path=os.path.join(save_dir, f'{country.lower()}_summary.png')
                )
        
        # 3. Zaman serisi (eƒüer veri varsa)
        if time_series_df is not None:
            available_countries = [c for c in countries if not time_series_df[time_series_df['country'] == c].empty]
            if available_countries:
                figures['time_series_confirmed'] = self.plot_time_series(
                    time_series_df, available_countries, 'confirmed',
                    save_path=os.path.join(save_dir, 'time_series_confirmed.png')
                )
        
        # 4. Korelasyon analizi
        figures['correlation'] = self.plot_correlation_matrix(
            snapshot_df,
            save_path=os.path.join(save_dir, 'correlation_matrix.png')
        )
        
        print(f"üéâ Dashboard √∂zeti olu≈üturuldu! {len(figures)} grafik {save_dir} dizininde")
        
        return figures


def create_quick_visualization(snapshot_data: pd.DataFrame, country: str = 'Turkey') -> None:
    """
    Hƒ±zlƒ± g√∂rselle≈ütirme i√ßin yardƒ±mcƒ± fonksiyon.
    
    Args:
        snapshot_data (pd.DataFrame): Mevcut durum verisi
        country (str): G√∂rselle≈ütirilecek √ºlke
    """
    visualizer = CovidVisualizer()
    
    print(f"üìä {country} i√ßin hƒ±zlƒ± g√∂rselle≈ütirme olu≈üturuluyor...")
    
    # √úlke √∂zeti
    fig = visualizer.plot_country_summary(snapshot_data, country)
    if fig:
        plt.show()
    
    print("‚úÖ G√∂rselle≈ütirme tamamlandƒ±!")


if __name__ == "__main__":
    # Test kodu
    print("üìä COVID-19 Visualization Test")
    print("=" * 40)
    
    # Basit test verisi olu≈ütur
    test_data = pd.DataFrame({
        'country': ['Turkey', 'Germany', 'USA', 'Italy', 'Spain'],
        'total_cases': [17232066, 38437756, 103436829, 25603510, 13980340],
        'total_deaths': [102174, 174979, 1127152, 192474, 121760],
        'total_recovered': [16000000, 37000000, 100000000, 24000000, 13000000],
        'active_cases': [1129892, 1262777, 2309677, 1411036, 858580],
        'new_cases': [0, 0, 0, 0, 0],
        'new_deaths': [0, 0, 0, 0, 0],
        'new_recovered': [0, 0, 0, 0, 0],
        'cases_per_million': [204129, 459763, 312691, 435069, 296304],
        'deaths_per_million': [1210, 2094, 3407, 3272, 2583]
    })
    
    try:
        visualizer = CovidVisualizer()
        
        # √úlke √∂zeti testi
        print("\nüáπüá∑ T√ºrkiye √∂zet grafiƒüi olu≈üturuluyor...")
        fig1 = visualizer.plot_country_summary(test_data, 'Turkey')
        if fig1:
            print("‚úÖ T√ºrkiye √∂zeti ba≈üarƒ±yla olu≈üturuldu")
            plt.close(fig1)  # Belleƒüi temizle
        
        # Top √ºlkeler testi
        print("\nüåç Top √ºlkeler grafiƒüi olu≈üturuluyor...")
        fig2 = visualizer.plot_top_countries(test_data, 'total_cases', top_n=5)
        if fig2:
            print("‚úÖ Top √ºlkeler grafiƒüi ba≈üarƒ±yla olu≈üturuldu")
            plt.close(fig2)
        
        # Korelasyon testi
        print("\nüîç Korelasyon matrisi olu≈üturuluyor...")
        fig3 = visualizer.plot_correlation_matrix(test_data)
        if fig3:
            print("‚úÖ Korelasyon matrisi ba≈üarƒ±yla olu≈üturuldu")
            plt.close(fig3)
        
        print("\nüéâ T√ºm g√∂rselle≈ütirme testleri ba≈üarƒ±yla tamamlandƒ±!")
        
    except Exception as e:
        print(f"\nüí• G√∂rselle≈ütirme test hatasƒ±: {e}")